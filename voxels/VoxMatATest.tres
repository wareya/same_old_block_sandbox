[gd_resource type="ShaderMaterial" load_steps=3 format=3 uid="uid://bts2d6ityo6xe"]

[ext_resource type="CompressedTexture2DArray" uid="uid://cj8k35d124enw" path="res://art/tilemap.png" id="1_bute4"]

[sub_resource type="Shader" id="Shader_apfu3"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_lambert,specular_schlick_ggx;
uniform sampler2DArray texture_albedo : source_color,filter_nearest_mipmap_anisotropic,repeat_enable;

varying flat int bitmask;
varying flat int index;

#include \"res://voxels/common.gdshaderinc\"

void vertex()
{
    int d;
    index = 0;
    bitmask = 0;
    decode_custom(CUSTOM0, d, index, bitmask);
    
    vec3 orig_vertex = VERTEX;
    
    if (d >= 6)
    {
        int item = VERTEX_ID/4/4;
        item = item ^ (item*12593) ^ 0x10F9BA38;
        float offset_x = float(item%1024)/1024.0;
        float offset_z = float(item/5%1024)/1024.0;
        VERTEX.x += offset_x*0.35;
        VERTEX.z += offset_z*0.35;
    }
    
    vec3 pos = orig_vertex.xyz;
    
    calculate_uv_normal_etc(d, pos, UV, NORMAL, TANGENT, BINORMAL);
    
    //float to_bottom
    bool do_sway = (VERTEX_ID/2 % 2) == 0 || d < 6;
    float offset_x = VERTEX.x/2.0;
    float offset_z = VERTEX.z/3.0 + VERTEX.x/4.0;
    float factor = do_sway ? 1.0 : 0.0;
    VERTEX.x += sin(TIME*2.09 + VERTEX.y + offset_x)*0.05*factor;
    VERTEX.z += cos(TIME*2.24 + VERTEX.y + 0.1 - offset_z)*0.05*factor;
}

void fragment()
{
    float offset = get_bitmask_offset(UV, bitmask);
    
    vec4 tex = texture(texture_albedo, vec3(UV.x, UV.y, float(index) + offset));
    vec3 color = tex.rgb;
    
    float roughness = estimate_roughness(color);
    
    ALBEDO = color;
    ROUGHNESS = roughness;
    
    if (tex.a < 0.5)
        discard;
}
"

[resource]
render_priority = 0
shader = SubResource("Shader_apfu3")
shader_parameter/texture_albedo = ExtResource("1_bute4")
