[gd_resource type="ShaderMaterial" load_steps=3 format=3 uid="uid://c6perjtd8jr4l"]

[ext_resource type="CompressedTexture2DArray" uid="uid://cj8k35d124enw" path="res://art/tilemap.png" id="1_06fay"]

[sub_resource type="Shader" id="Shader_c04dw"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,cull_disabled,diffuse_lambert,specular_schlick_ggx;
uniform sampler2DArray texture_albedo : source_color,filter_nearest_mipmap_anisotropic,repeat_enable;
global uniform sampler2D distorted_normals : hint_normal,filter_linear_mipmap_anisotropic,repeat_enable;

varying flat int bitmask;
varying flat int index;

void vertex()
{
    vec3 pos = VERTEX.xyz + NODE_POSITION_WORLD.xyz;
    int d = int(CUSTOM0.r * 255.0);
    int a = int(CUSTOM0.g * 255.0);
    int b = int(CUSTOM0.b * 255.0);
    index = ((a << 8) | b);//+70;
    bitmask = int(CUSTOM0.a * 255.0);
    
    BINORMAL = vec3(0.0, -1.0, 0.0);
    if (d == 0)
    {
        UV = vec2(pos.x, pos.z) + vec2(0.5);
        NORMAL = vec3(0.0, 1.0, 0.0);
        TANGENT = vec3(-1.0, 0.0, 0.0);
        BINORMAL = vec3(0.0, 0.0, 1.0);
    }
    else if (d == 1)
    {
        UV = vec2(-pos.x, pos.z) + vec2(0.5);
        NORMAL = vec3(0.0, -1.0, 0.0);
        TANGENT = vec3(-1.0, 0.0, 0.0);
        BINORMAL = vec3(0.0, 0.0, -1.0);
    }
    else if (d == 2)
    {
        UV = vec2(-pos.x, -pos.y) + vec2(0.5);
        NORMAL = vec3(0.0, 0.0, -1.0);
        TANGENT = vec3(1.0, 0.0, 0.0);
    }
    else if (d == 3)
    {
        UV = vec2(pos.x, -pos.y) + vec2(0.5);
        NORMAL = vec3(0.0, 0.0, 1.0);
        TANGENT = vec3(-1.0, 0.0, 0.0);
    }
    else if (d == 4)
    {
        UV = vec2(pos.z, -pos.y) + vec2(0.5);
        NORMAL = vec3(-1.0, 0.0, 0.0);
        TANGENT = vec3(0.0, 0.0, -1.0);
    }
    else if (d == 5)
    {
        UV = vec2(-pos.z, -pos.y) + vec2(0.5);
        NORMAL = vec3(1.0, 0.0, 0.0);
        TANGENT = vec3(0.0, 0.0, 1.0);
    }
}

#define BIT_00 1
#define BIT_10 2
#define BIT_20 4
#define BIT_01 8
#define BIT_21 16
#define BIT_02 32
#define BIT_12 64
#define BIT_22 128

float fresnelSchlick(float incidence, float f0, float f90)
{
    float t = clamp(1.0 - incidence, 0.0, 1.0);
    float t2 = t*t;
    float t5 = t2*t2*t;
    return mix(f0, f90, t5);
}
vec3 sample_normals(vec2 uv, float x, float y, float scale)
{
    vec3 norm = (texture(distorted_normals, (uv + vec2(x, y)) * scale).rgb * 2.0 - 1.0)*0.21;
    return norm;
}

void fragment()
{
    vec3 norm = sample_normals(UV, TIME*-0.2, TIME*0.4, 0.025) * vec3(vec2(0.2), 1.0);
    norm += sample_normals(UV, TIME*0.1, TIME*0.1, 0.05) * vec3(vec2(0.15), 1.0);
    norm += sample_normals(UV, TIME*0.2, TIME*-0.1, 0.075) * vec3(vec2(0.1), 1.0);
    
    vec2 uv = UV;
    uv += norm.xy*vec2(2.0, 0.5);
    
    vec2 quadrant = round(fract(uv));
    float offset = 0.0;
    
    bool ud_offset = false;
    bool lr_offset = false;
    bool di_offset = false;
    int ud_test = 0;
    int lr_test = 0;
    int di_test = 0;
    if (quadrant.x < 0.5 && quadrant.y >= 0.5)
    {
        ud_test = BIT_10;
        lr_test = BIT_01;
        di_test = BIT_00;
    }
    else if (quadrant.x >= 0.5 && quadrant.y >= 0.5)
    {
        ud_test = BIT_10;
        lr_test = BIT_21;
        di_test = BIT_20;
    }
    else if (quadrant.x < 0.5 && quadrant.y <0.5)
    {
        ud_test = BIT_12;
        lr_test = BIT_01;
        di_test = BIT_02;
    }
    else if (quadrant.x >= 0.5 && quadrant.y < 0.5)
    {
        ud_test = BIT_12;
        lr_test = BIT_21;
        di_test = BIT_22;
    }
    if ((bitmask & ud_test) == 0)
        ud_offset = true;
    if ((bitmask & lr_test) == 0)
        lr_offset = true;
    if (ud_offset || lr_offset || (bitmask & di_test) == 0)
        di_offset = true;
    
    if (ud_offset && lr_offset)
        offset = 1.0;
    else if (lr_offset)
        offset = 2.0;
    else if (ud_offset)
        offset = 3.0;
    else if (di_offset)
        offset = 4.0;
    
    vec4 tex = texture(texture_albedo, vec3(uv, float(index) + offset));
    vec3 color = tex.rgb;
    
    float brightness = dot(color, vec3(1.0/3.0));
    float color_v = max(0.0, brightness-0.4)*5.0 + 0.5;
    float color_part = color.b*4.0 + color.g*0.5 - color.r*0.5 + 0.5;
    float f = clamp(color_part - color_v, 0.0, 1.0);
    float roughness = 0.05;
    
    ALBEDO = color;
    ROUGHNESS = roughness;
    
    float a = sin(UV.x*4.0);
    
    norm = normalize(norm);
    norm = norm;
    
    vec3 view = normalize(VIEW);
    
    if (dot(view, NORMAL) < 0.0)
    {
        NORMAL = -NORMAL;
        BINORMAL = -BINORMAL;
    }
    
    vec3 n = normalize(NORMAL*norm.z + TANGENT*norm.x + BINORMAL*norm.y);
    
    if (dot(reflect(view, n), NORMAL) < 0.0)
        NORMAL_MAP = norm * 0.5 + 0.5;
    else
        n = NORMAL;
    
    float inc = max(0.0, dot(view, n));
    float fresnel = fresnelSchlick(inc, 0.02, 1.0);
    
    METALLIC = min(1.0, fresnel*2.0);
    
    vec3 grey = vec3(dot(ALBEDO, vec3(1.0/3.0)));
    ALBEDO = mix(ALBEDO, grey, fresnel);
    tex.a = mix(tex.a, 1.0, fresnel);
    
    BACKLIGHT = vec3(1.0);
    
    ALPHA = tex.a;
}

/*
float distGGX(float halfIncidence, float r)
{
    r = r*r;
    r = r*r;
    
    float d = halfIncidence*halfIncidence * (r - 1.0) + 1.0;
    
    return r / (d * d * PI);
}
float geoSchlickGGX(float incidence, float roughness)
{
    roughness += 1.0;
    float k = (roughness * roughness) / 8.0;
    return incidence / mix(incidence, 1.0, k);
}
float geoSmith(float viewIncidence, float lightIncidence, float roughness)
{
    return geoSchlickGGX(viewIncidence, roughness) * geoSchlickGGX(lightIncidence, roughness);
}
float BRDF(vec3 normalDir, vec3 viewDir, vec3 lightDir, vec3 halfDir, float roughness)
{
    float lightIncidence = max(dot(normalDir, lightDir), 0.00001);
    float halfIncidence  = max(dot(normalDir,  halfDir), 0.00001);
    float viewIncidence  = max(dot(normalDir,  viewDir), 0.00001);
    
    float NDF = distGGX(halfIncidence, roughness);
    float geo = geoSmith(viewIncidence, lightIncidence, roughness);

    return (NDF * geo) / (4.0 * viewIncidence * lightIncidence);
}

/*
void light()
{
    DIFFUSE_LIGHT = vec3(0.0);
    SPECULAR_LIGHT = vec3(0.0);
    if (false)
    {
        float abs_lamb = abs(dot(NORMAL, LIGHT));
        float max_lamb = max(0.0, dot(NORMAL, LIGHT));
        vec3 lamb = mix(vec3(max_lamb), vec3(abs_lamb), BACKLIGHT);
        
        vec3 halfDir = normalize(VIEW + LIGHT);
        //vec3 halfDir = NORMAL;
        float fresnel = fresnelSchlick(max(dot(halfDir, VIEW), 0.0), 0.02, 1.0);
        
        vec3 lc = LIGHT_COLOR/PI * ATTENUATION * lamb;
        
        float spec = BRDF(NORMAL, VIEW, LIGHT, halfDir, ROUGHNESS) * SPECULAR_AMOUNT;
        float diff = 1.0 - spec;
        
        DIFFUSE_LIGHT = lc * diff;
        SPECULAR_LIGHT = lc * spec;
    }
}
*/"

[resource]
render_priority = 0
shader = SubResource("Shader_c04dw")
shader_parameter/texture_albedo = ExtResource("1_06fay")
