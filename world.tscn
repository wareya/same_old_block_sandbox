[gd_scene load_steps=26 format=3 uid="uid://cfo3tvk8wo233"]

[ext_resource type="Script" path="res://world.gd" id="1_m7hry"]
[ext_resource type="FastNoiseLite" uid="uid://usco3w3110wq" path="res://voxels/Noise.tres" id="2_y2ure"]
[ext_resource type="Material" uid="uid://cf8645je7btd2" path="res://voxels/VoxMat.tres" id="2_yo0d7"]
[ext_resource type="AudioStream" uid="uid://bt6lbbpn0ett7" path="res://bgm/main theme.ogg" id="3_ykvi2"]

[sub_resource type="Shader" id="Shader_nvkpg"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.1.stable.mono's StandardMaterial3D.

shader_type spatial;
render_mode blend_add,depth_draw_never,cull_back,diffuse_burley,specular_schlick_ggx,unshaded,shadows_disabled,ambient_light_disabled;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}




vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(triplanar_texture(texture_metallic,uv1_power_normal,uv1_triplanar_pos),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	ALPHA *= albedo.a * albedo_tex.a;
    
    float n = (INV_VIEW_MATRIX * vec4(normalize(VERTEX), 0.0)).y;
    n = clamp((n+0.1)*1.0, 0.0, 1.0);
    
    ALPHA *= n;
    
    FOG *= 0.0;
}
"

[sub_resource type="Gradient" id="Gradient_7p4ug"]
interpolation_mode = 1
offsets = PackedFloat32Array(0, 0.91875)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_j8ls0"]
noise_type = 4
frequency = 0.313
fractal_octaves = 2
fractal_lacunarity = 0.01
fractal_gain = 0.15
fractal_weighted_strength = 1.0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_c5ge0"]
width = 2048
height = 2048
color_ramp = SubResource("Gradient_7p4ug")
noise = SubResource("FastNoiseLite_j8ls0")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_py3ds"]
render_priority = 0
shader = SubResource("Shader_nvkpg")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_blend_sharpness = 150.0
shader_parameter/uv1_scale = Vector3(0.004, 0.004, 0.004)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = SubResource("NoiseTexture2D_c5ge0")

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_a1coy"]
sky_top_color = Color(0.0392157, 0.0392157, 0.0392157, 1)
sky_horizon_color = Color(0.0392157, 0.0392157, 0.0392157, 1)
sky_curve = 0.15529
ground_bottom_color = Color(0.133333, 0.145098, 0.2, 1)
ground_horizon_color = Color(0.72549, 0.831373, 1, 1)
sun_angle_max = 11.61
sun_curve = 0.172306

[sub_resource type="Sky" id="Sky_bj5pq"]
sky_material = SubResource("ProceduralSkyMaterial_a1coy")

[sub_resource type="Environment" id="Environment_3qx6c"]
background_mode = 2
sky = SubResource("Sky_bj5pq")
ambient_light_source = 2
ambient_light_color = Color(0.392157, 0.392157, 0.392157, 1)
tonemap_exposure = 1.2
ssao_enabled = true
ssao_light_affect = 1.0
ssao_ao_channel_affect = 1.0
ssil_normal_rejection = 0.7
sdfgi_y_scale = 0
glow_enabled = true
glow_levels/2 = 0.5
glow_levels/3 = 0.5
glow_levels/5 = 0.25
glow_normalized = true
glow_intensity = 0.05
glow_mix = 0.0
glow_blend_mode = 1
glow_hdr_threshold = 0.15
glow_hdr_scale = 0.0
fog_enabled = true
fog_light_color = Color(0.647059, 0.745098, 0.94902, 1)
fog_sun_scatter = 0.05
fog_density = 0.0025
fog_aerial_perspective = 1.0
fog_sky_affect = 0.0
volumetric_fog_anisotropy = 0.0
volumetric_fog_detail_spread = 6.0
volumetric_fog_ambient_inject = 1.0

[sub_resource type="Shader" id="Shader_k5naq"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.1.stable.mono's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_emission : source_color, hint_default_black,filter_linear_mipmap,repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	if (PROJECTION_MATRIX[3][3] != 0.0) {
		float h = abs(1.0 / (2.0 * PROJECTION_MATRIX[1][1]));
		float sc = (h * 2.0); //consistent with Y-fov
		MODELVIEW_MATRIX[0]*=sc;
		MODELVIEW_MATRIX[1]*=sc;
		MODELVIEW_MATRIX[2]*=sc;
	} else {
		float sc = -(MODELVIEW_MATRIX)[3].z;
		MODELVIEW_MATRIX[0]*=sc;
		MODELVIEW_MATRIX[1]*=sc;
		MODELVIEW_MATRIX[2]*=sc;
	}
}






void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	vec3 emission_tex = texture(texture_emission,base_uv).rgb;
	EMISSION = (emission.rgb+emission_tex)*emission_energy;
	ALPHA *= albedo.a * albedo_tex.a;
    
    FOG *= 0.0;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ajleu"]
render_priority = 0
shader = SubResource("Shader_k5naq")
shader_parameter/albedo = Color(0, 0, 0, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.0
shader_parameter/metallic = 0.0
shader_parameter/emission = Color(0.996078, 0.701961, 0.407843, 1)
shader_parameter/emission_energy = 4.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="LabelSettings" id="LabelSettings_7iqhx"]
outline_size = 5
outline_color = Color(0, 0, 0, 1)

[sub_resource type="SphereMesh" id="SphereMesh_bul5h"]

[sub_resource type="PlaneMesh" id="PlaneMesh_opc42"]
size = Vector2(69.57, 12.19)

[sub_resource type="PlaneMesh" id="PlaneMesh_n8sif"]
size = Vector2(11.78, 9.74)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_h7ptm"]
metallic = 1.0
roughness = 0.0

[sub_resource type="FastNoiseLite" id="FastNoiseLite_34jdu"]
noise_type = 5
frequency = 0.02
fractal_type = 3
fractal_octaves = 2
fractal_ping_pong_strength = 1.5

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_3p04s"]
noise = SubResource("FastNoiseLite_34jdu")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_ufa32"]
noise_type = 3
frequency = 0.02
fractal_type = 3
fractal_octaves = 2
fractal_ping_pong_strength = 1.5

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_7jmul"]
noise = SubResource("FastNoiseLite_ufa32")

[sub_resource type="GDScript" id="GDScript_l8h0q"]
script/source = "extends AudioStreamPlayer

const music_playlist = [
    preload(\"res://bgm/main theme.ogg\"),
    preload(\"res://bgm/cold theme.ogg\"),
    preload(\"res://bgm/hot theme.ogg\"),
]
var music_cursor = 0
func start_music_playlist():
    while true:
        await get_tree().create_timer(1.0).timeout
        var next = music_playlist[music_cursor]
        music_cursor = (music_cursor+1)%music_playlist.size()
        stream = next
        if !playing:
            playing = true
        await finished
    
"

[sub_resource type="FogMaterial" id="FogMaterial_be1xj"]

[node name="World" type="Node3D" groups=["World"]]
script = ExtResource("1_m7hry")
base_noise = ExtResource("2_y2ure")

[node name="StarSphere" type="CSGSphere3D" parent="."]
transform = Transform3D(6, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0)
visible = false
cast_shadow = 0
gi_mode = 0
flip_faces = true
radius = 100.0
radial_segments = 16
rings = 32
material = SubResource("ShaderMaterial_py3ds")

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_3qx6c")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-1, 7.57104e-08, -4.37114e-08, 0, 0.5, 0.866025, 8.74227e-08, 0.866026, -0.5, 0, 2.36717, -1.64375)
shadow_enabled = true
directional_shadow_split_1 = 0.02
directional_shadow_split_2 = 0.08
directional_shadow_split_3 = 0.25
directional_shadow_blend_splits = true
directional_shadow_max_distance = 200.0

[node name="SunSprite" type="CSGBox3D" parent="DirectionalLight3D"]
transform = Transform3D(0.1, 0, 0, 0, 0.1, 0, 0, 0, 0.1, 0, 0, 500)
cast_shadow = 0
extra_cull_margin = 10000.0
material = SubResource("ShaderMaterial_ajleu")

[node name="FPS" type="Label" parent="."]
offset_right = 40.0
offset_bottom = 23.0
label_settings = SubResource("LabelSettings_7iqhx")

[node name="ReflectionProbe2" type="ReflectionProbe" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 5.53641, 2.38601, 0.10903)
visible = false
size = Vector3(16, 16, 16)
box_projection = true
enable_shadows = true
ambient_mode = 0

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(3.76418, 1.77512, 2.18733, -1.05499, 4.27328, -1.65244, -2.61198, 0.832168, 3.81963, 0, 2.69927, 0)
visible = false
mesh = SubResource("SphereMesh_bul5h")

[node name="MeshInstance3D2" type="MeshInstance3D" parent="."]
visible = false
mesh = SubResource("PlaneMesh_opc42")
surface_material_override/0 = ExtResource("2_yo0d7")

[node name="MeshInstance3D3" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -6.96655, 0.189953, 0)
visible = false
mesh = SubResource("PlaneMesh_n8sif")
surface_material_override/0 = SubResource("StandardMaterial3D_h7ptm")

[node name="TextureRect" type="TextureRect" parent="."]
visible = false
offset_right = 512.0
offset_bottom = 512.0
texture = SubResource("NoiseTexture2D_3p04s")

[node name="TextureRect2" type="TextureRect" parent="."]
visible = false
offset_right = 512.0
offset_bottom = 512.0
texture = SubResource("NoiseTexture2D_7jmul")

[node name="BGMPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource("3_ykvi2")
bus = &"BGM"
script = SubResource("GDScript_l8h0q")

[node name="AmbiencePlayer" type="AudioStreamPlayer" parent="."]
bus = &"BGM"

[node name="FogVolume" type="FogVolume" parent="."]
material = SubResource("FogMaterial_be1xj")
